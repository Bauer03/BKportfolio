:root {
    /* Color scheme manipulated using these values. Change to affect whole site */
    --col-1: white;
    --col-2: black;
    --col-3: #5b0a09;

    --fs-big: 5.5rem;
    --fs-medium: 2.8rem;
    --fs-small:1.7rem;
    --mat-symb: 4rem;
}

* {
    padding: 0;
    margin: 0;
}

html {
    overflow-x: hidden;
}

.subtitle {
    font-size: var(--fs-small);
}

body {
    height: 100dvh;
    width: 100dvw;
    position: relative;
    font-family:Georgia, 'Times New Roman', Times, serif;
    overflow-x: hidden;
}

.navbar {
    position: fixed;
    z-index: 1;
    color: black;
    background-color: var(--col-1);
    width: 100%;
    max-width: 100dvw;
    overflow: hidden;
    display: flex;
    justify-content: space-between;
    align-content: center;
    top: 0px;
    padding-block: 1em;
    animation: fade-in-down .8s ease-out;

    & .subtitle {
        font-size: var(--fs-small);
        text-transform: uppercase;
    }

    & h1 {
        font-size: var(--fs-big);
    }
}

@keyframes fade-in-down {
    from {
        transform: translateY(-10%);
        opacity: 0;
    }
    to {
        transform: translateY(0);
        opacity: 1;
    }    
}

.nav-toggle {
    transform: rotate(0deg);
    transition: transform .3s cubic-bezier(0, 0.01, 0, 1);

    &.open {
        transform: rotate(90deg);
    }
}

.nav-menu {
    position: absolute;
    display: flex;
    flex-direction: column;
    color: white;
    cursor: pointer;

    top: 0px;
    right: 1em;

    background-color: rgba(100, 100, 100, 0.344);
    backdrop-filter: blur(10px);
    --webkit-backdrop-filter: blur(10px);
    font-size: var(--fs-small);

    /* width: max-content; */
    height: auto;
    z-index: 2;
    /* padding: 1em; */
    border-radius: 3px;

    transition: transform .4s ease-out;

    & > * {
        padding: 1em;
        &:hover{
            background-color: rgba(0, 0, 0, 0.5);
        }
    }

    &.onload { /* Used so that I can compute getBoundingClientRect() of .navbar without the height of .nav-menu influencing the result */
        display: none;
    }

    &.closed {
        transform: translateX(calc(100% + 1em));
    }
}

.nav-right, .nav-left {
    position:absolute;
}

.nav-left {
    left: 2em;
    top: 2em;
    transform: translateY(-50%);
}

.nav-right {
    transform: translateY(-50%) scale(1);
    right: 2em;
    top: 60px;
    transition: all .125s ease-out;
}

.material-symbols-outlined {
    font-size: var(--mat-symb) !important;
    cursor:pointer;
    user-select: none;
}

.logo-small {
    height: 100px;
    width: 100px;
    border-radius: 50%;
    filter: invert(); /* Delete this line once color scheme is decided */
    top: 1em;
}

.navdiv {
    flex-grow: 1;
    display: grid;
    align-items: center;
    justify-items: center;
    transition-timing-function: ease-out;
    transition-duration: .3s;
    user-select: none;
    > * {
        cursor: pointer;
    }
}

.subtitle {
    cursor: unset;
}

.cont {
    display: grid;
    position: absolute;
    max-width: 100dvw;
    background-color: var(--col-1);
    z-index: 0;
    top: 10em;
}

.logo-large {
    width: 160px;
    height: 160px;
    border-radius: 50%;
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%);
}

.left {
    background-color: var(--col-2);
}

.right {
    background-color: var(--col-2);
}

.left, .right {
    position: relative;
    cursor: pointer;
    overflow: hidden;
}

.left-img {
    transform: scale(1.5); /* 'temporary' fix because aspect-ratio is off. */
}

.left-img, .right-img {
    opacity: 0.12;
}

.left-text, .right-text {
    position: absolute;
    top: calc(50% - 26px);
    color: var(--col-1);
    font-size: var(--fs-medium);
    animation: fade-in-up 1s ease-out;
}

@keyframes fade-in-up {
    from {
        transform: translateY(10px);
        opacity: 0;
    }
    to {
        transform: translateY(0);
        opacity: 1;
    }
}

.left-text {
    left: calc(50% - 72px);
}

.right-text {
    left: calc(50% - 119px);
}